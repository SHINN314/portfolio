---
import ogs from "open-graph-scraper";
import { Image } from "astro:assets";

interface Props {
	slug: string;
	title?: string;
	image?: string;
	description?: string;
}

const { slug, title, image, description } = Astro.props;

// ogsで情報を取得する関数
async function getOpenGraphData(url: string) {
	const option = { url };
	try {
		const { result } = await ogs(option);
		return result;
	} catch (error) {
		console.log("Error fetching Open Graph Data:", error);
		return {};
	}
}

const websiteData = await getOpenGraphData(slug);
const ogImage =
	image ||
	websiteData?.ogImage?.[0]?.url ||
	"../content/pictures/no_image.webp";
const ogTitle = title || websiteData?.ogTitle || "タイトルの取得に失敗しました";
const ogDescription = description || websiteData?.ogDescription || "";
---

<style>
	.a {
	}

	.root-container {
		display: flex;
		flex-direction: column;
		border: solid #87cefa 1px;
		border-radius: 10px;
		padding: 1rem;
		transition-duration: 300ms;
	}
	@media screen and (768px <= width) {
		.root-container {
			flex-direction: row;
			height: 7rem;
			padding: 0;
		}
	}

	.description-container {
		margin-top: 1rem;
	}
	@media screen and (768px <= width) {
		.description-container {
			width: 100%;
			margin-top: 0;
			padding: 1rem;
		}
	}

	.root-container:hover {
		background-color: #eee;
	}

	.title {
	}

	.site-description {
		overflow: hidden;
		text-overflow: ellipsis;
		color: #777;
		max-height: 6rem;
	}
	@media screen and (768px <= width) {
		.site-description {
			max-height: 5rem;
		}
	}

	.image-container {
		width: 100%;
		height: auto;
		border-radius: 10px;
	}
	@media screen and (768px <= width) {
		.image-container {
			width: auto;
			height: 100%;
			border-radius: 10px 0 0 10px;
		}
	}
</style>

<a href={slug} , target="_blank" class="a">
	<div class="root-container">
		<Image src={ogImage} inferSize alt="" class="image-container" />
		<div class="description-container">
			<div class="title">{ogTitle}</div>
			<p class="site-description">{ogDescription}</p>
		</div>
	</div></a
>
